Команды урока 2
1) Какие компоненты процесса могут быть изолированы? Идентификаторы пользователя, системы, хоста, сетевой стек, точка монтирования. С одной стороны, обеспечивается защита гостевой системы, а также можно манипулировать объектами для обеспечения специфических процессов. Но это мешает запуску сложных приложений. Концепция докер - один процесс=один контейнер.
2) Доступ к файлам внутри контейнера осуществляется нетривиально. Верхний слой контейнера доступен для чтения/записи, нижние - только для чтения. Самые простые для доступа файлы - те, которые лежат в слое контейнера, они доступны как и любые другие файлы.
Файлы из слоев внутри образа доступны по-другому. Допустим, внутри находится некий файл. Если мы хотим его прочитать, union file system осуществляет поиск этого файла, начиная со слоя контейнера и далее вглубь. Этот процесс зависит от того, какую именно ufs мы используем. Запись делается при помощи сложной манипуляции - сначала мы находим файл, затем копируем его при записи в слой контейнера, и именно в него вносятся изменения. Этот файл находится по тому же пути, что и файл образа, и, фактически, маскирует файл из образа. Удаление файла - это размещение в слое контейнера специальной записи, которая говорит, что файл из слоя образа был удален. ufs при этом этот файл показывать не будет.
Итак, доступ получать можно.
Персистентные данные хранить в контейнере не стоит - во-первых, есть проблемы со скоростью, во-вторых, жизненные циклы контейнеров и данных могут не совпадать. 
3) Как именно процесс из контейнера получает доступ ко внешним файлам из хоста? 
Во-первых, можно монтировать.
sudo docker run -it --rm -v $(pwd):/home ubuntu:14.04
команда -v откуда_монтируем_в_хосте:куда_монтируем_в_контейнере
sudo docker run --rm -v ~/message:/home/stepik/message parseq/stepik-host-dir

4) Пользователь с доступом к контейнерам равен суперпользователю.

5) Хранение данных осуществляется в data volumes (https://docs.docker.com/engine/admin/volumes/volumes/#create-and-manage-volumes)
Осуществим доступ к персистентным данным при помощи data volumes и data volume containers.
Data volumes создаются для каждого отдельного контейнера отдельными. 

sudo docker create -v /srv --name store ubuntu:14.04 /bin/true
create создает контейнер, но не запускает его сразу
мы создаем сейчас контейнер с именем store

sudo docker run -it --rm --volumes-from store ubuntu:14.04
для доступа к данным из других контейнеров используется команда --volumes-from <имя_контейнера>

6) Несколько полезных команд для данных:
docker volume ls -qf dangling=true - посмотреть список осиротевших томов
docker volume rm $(docker volume ls -qf dangling=true) - удаление осиротевших томов

