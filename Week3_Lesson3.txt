Третий урок - концепции, делающие язык более гибким и функциональным.

При написании можно использовать директивы вроде Hints and Requirements.

'''
hints:
 - class: DockerRequirement
   dockerpull: java:8
 - class: InlineJavascriptRequirement

requirements:
 - class: ShellCommandRequirement
 - class: InitialworkDirRequirement
   listing:
    - $(inputs.input_file)

inputs:
 input_file:
  type: File
'''

Синтаксис похож, но в случае hints требования более мягкие, и среда даст предупреждение, если не сможет выполнить его, а в случае requirements - ошибку с падением.

DockerRequirement - фактически это требование запустить пайплайн внутри докер-контейнера. Контейнер получается двумя способами: контейнер просто стягивается из репозитория; контейнер указывается по id, либо по докер-файлу, причем докер-файл можно написать прямо в CWL-документе. Система сама запустит docker build.

InitialworkDirRequirement - необходимо, если программе недостаточно указать полный путь к входным данным, а она требует, чтобы входные файлы или папки находились непосредственно в той директории, где идет запуск программы. И мы дополнительно передаем массив входных параметров, файлов или папок, которые необходимо создать в рабочей директории.

InlineJavascriptRequirement - позволяет вставлять в документ CWL код на языке Javascript. Очень удобно, если мы не хотим в качестве входного параметра передавать название файла, которое будет на выходе. Удобно сформировать название выходного файла на базе названия входного файла. Это делается простым JS-выражением.


ExpressionTool

Когда в пайплайне необходимо реализовать дополнительную, но простую логику (расчет параметра), то ее удобно вынести в отдельно оформленный степ. 
В CWL можно удобно запустить пайплайн на массиве файлов, но это должен быть именно массив файлов, а не просто папка.
